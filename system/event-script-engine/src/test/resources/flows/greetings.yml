flow:
  id: 'greetings'
  description: 'Simplest flow of one task'
  ttl: 10s
  exception: 'v1.hello.exception'

first.task: 'my.greeting.task'

tasks:
  - name: 'my.greeting.task'
    input:
      - 'input.path_parameter.user -> user'
      - 'input.path_parameter.user -> model.user:int -> user_number'
      - 'input.query.ex -> exception'
      - 'text(hello world) -> greeting'
      - 'text(${PATH}) -> path'
      - 'long(12345) -> long_number'
      - 'float(12.345) -> float_number'
      - 'double(12.345) -> double_number'
      - 'boolean(true) -> boolean_value'
      - 'boolean(true) -> !model.bool -> negate_value'
      - 'model.bool:! -> double_negate_value'
      - 'text(wonderful day) -> model.world'
      - 'text(world) -> model.pointer'
      # model.{model.pointer} is resolved to model.world. Therefore, runtime_value1 = 'wonderful day'
      - 'model.{model.pointer} -> runtime_value1'
      # runtime_value2 is resolved to 'new world'
      - 'text(new {model.pointer}) -> runtime_value2'
      # non-exist model variable can be used in 2 use cases ("boolean null" and "uuid")
      - 'model.none:boolean (null = true) -> none_is_true'
      - 'model.none:boolean (null=false) -> none_is_false'
      - 'model.none:uuid -> unique_id1'
      # 3-part entry is compiled into 2 entries of 2-part format
      # since the right hand side (the middle one) is a model variable, a null value from LHS is fine
      - 'model.none -> model.uuid:uuid -> unique_id2'
      - 'model.uuid -> unique_id3'
      - 'map(direction=right, test=message) -> model.map'
      - 'text(demo_token) -> model.access_token'
      - 'input.header -> header'
      - 'input.path_parameter.user -> header.user'
      - 'text(ok) -> header.demo'
      - 'model.trace -> trace_id'
      - 'model.flow -> flow_id'
      - 'text( ) -> model.space'
      - 'text(a) -> model.a'
      - 'text(b) -> model.b'
      - 'text(c) -> model.c'
      - 'model.a:concat(model.space, model.b, text(,), model.c) -> concat_string'
    process: 'greeting.test'
    output:
      - 'text(application/json) -> output.header.content-type'
      - 'result -> output.body'
      - 'map(test.map) -> output.body.map1'
      - 'model.map -> output.body.map2'
      - 'map(test.map3) -> output.body.map3'
      # invalid HTTP status will be rejected
      - 'text(20000) -> output.status'
      - 'status -> output.status'
      # mapping rejected because "output header" expects a map instead of text
      - 'text(invalid) -> output.header'
      - 'header -> output.header'
      - 'header.demo -> output.header.x-demo'
      - 'text(${application.name}) -> output.body.name'
      - 'model.bool -> !model.bool -> output.body.positive'
    description: 'Hello World'
    execution: end

  - input:
      - 'error.code -> status'
      - 'error.message -> message'
      - 'error.stack -> stack'
    process: 'v1.hello.exception'
    output:
      - 'result.status -> output.status'
      - 'result -> output.body'
    description: 'Just a demo exception handler'
    execution: end
