flow:
  id: 'type-conversion'
  description: 'Type conversion plugin tests'
  ttl: 10s

first.task: 'my.types.task'

tasks:
  - name: 'my.types.task'
    input:
      - 'text(Hello) -> model.text_one'
      - 'text( World!) -> model.text_two'

      - 'int(256) -> model.int'
      - 'text(256) -> model.string_int'

      - 'long(9223372036854775807) -> model.long'
      - 'text(9223372036854775807) -> model.string_long'

      - 'float(128.5) -> model.float'
      - 'text(128.5) -> model.string_float'

      - 'double(256.75) -> model.double'
      - 'text(256.75) -> model.string_double'

      - 'boolean(true) -> model.bool_true'
      - 'boolean(false) -> model.bool_false'
      - 'text(true) -> model.string_bool'

      - 'text(SGVsbG8=) -> model.b64_str'

      - 'f:text(model.text_one) -> string'

      - 'f:int(model.int) -> integer'
      - 'f:int(model.string_int) -> integer_convert'

      - 'f:long(model.long) -> long'
      - 'f:long(model.string_long) -> long_convert'

      - 'f:float(model.float) -> float'
      - 'f:float(model.string_float) -> float_convert'

      - 'f:double(model.double) -> double'
      - 'f:double(model.string_double) -> double_convert'

      - 'f:boolean(model.bool_true) -> bool_true'
      - 'f:boolean(model.bool_false) -> bool_false'
      - 'f:boolean(model.string_bool) -> bool_convert'

      - 'text(Hello=true) -> model.command_one'
      - 'text(world=true) -> model.command_two'
      - 'text(null=true) -> model.command_three'
      - 'text(Hello) -> model.command_four'
      - 'text(world) -> model.command_five'

      - 'f:boolean(model.text_one, model.command_one) -> bool_command_positive'
      - 'f:boolean(model.text_one, model.command_two) -> bool_command_negative'
      - 'f:boolean(model.none, model.command_three) -> bool_command_null'
      - 'f:boolean(model.text_one, model.command_four) -> bool_command_match'
      - 'f:boolean(model.text_one, model.command_five) -> bool_command_nonmatch'

      - 'f:binary(model.text_one) -> binary'
      - 'int(1) -> model.substring_start'
      - 'int(6) -> model.substring_end'

      - 'f:and(model.bool_true, model.bool_false) -> and'
      - 'f:or(model.bool_true, model.bool_false) -> or'
      - 'f:not(model.bool_false) -> not'
      - 'f:ternary(model.bool_true, model.text_one, model.text_two) -> positive_ternary'
      - 'f:ternary(model.bool_false, model.text_one, model.text_two) -> negative_ternary'
      - 'f:eq(model.text_one, model.text_one) -> positive_eq'
      - 'f:eq(model.text_one, model.text_two) -> negative_eq'

      - 'int(2) -> model.two'
      - 'int(3) -> model.three'
      - 'f:gt(model.three, model.two) -> greater_than_positive'
      - 'f:gt(model.two, model.three) -> greater_than_negative'
      - 'f:lt(model.two, model.three) -> less_than_positive'
      - 'f:lt(model.three, model.two) -> less_than_negative'

      - 'f:substring(model.text_two, model.substring_start) -> substring_one'
      - 'f:substring(model.text_two, model.substring_start, model.substring_end) -> substring_two'
      - 'f:concat(model.text_one, model.text_two) -> concat'

      - 'f:b64(model.b64_str) -> model.to_b64_bytes'
      - 'model.to_b64_bytes -> to_b64_bytes'
      - 'f:b64(model.to_b64_bytes) -> to_bytestring'

      - 'f:uuid() -> uuid'
      - 'f:length(model.to_b64_bytes) -> arr_length'
      - 'f:length(model.text_one) -> str_length'
    process: 'no.op'
    output:
      - 'text(application/json) -> output.header.content-type'
      - 'result -> output.body'
    description: 'Arithmetic Operations'
    execution: end
